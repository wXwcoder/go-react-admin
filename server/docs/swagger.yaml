basePath: /
definitions:
  model.Api:
    properties:
      category:
        example: 用户管理
        maxLength: 50
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: 获取用户列表接口
        maxLength: 255
        type: string
      id:
        example: 1
        type: integer
      method:
        description: GET, POST, PUT, DELETE
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        example: GET
        type: string
      path:
        example: /api/users
        maxLength: 100
        type: string
      status:
        description: 1:启用 2:禁用
        enum:
        - 1
        - 2
        example: 1
        type: integer
      tenant_id:
        description: 租户ID
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - category
    - method
    - path
    type: object
  model.Menu:
    properties:
      component:
        example: User
        maxLength: 100
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      hidden:
        example: false
        type: boolean
      icon:
        example: user
        maxLength: 50
        type: string
      id:
        example: 1
        type: integer
      level:
        example: 1
        type: integer
      name:
        example: 用户管理
        maxLength: 50
        minLength: 2
        type: string
      parent_id:
        example: 0
        type: integer
      path:
        example: /user
        maxLength: 100
        type: string
      sort:
        example: 1
        type: integer
      status:
        description: 1:启用 2:禁用
        enum:
        - 1
        - 2
        example: 1
        type: integer
      tenant_id:
        description: 租户ID
        example: 1
        type: integer
      title:
        example: 用户管理
        maxLength: 50
        type: string
      type:
        description: menu:菜单项 group:菜单组
        enum:
        - menu
        - group
        example: menu
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - name
    - title
    type: object
  model.Role:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: 系统管理员角色
        maxLength: 255
        type: string
      id:
        example: 1
        type: integer
      name:
        example: 管理员
        maxLength: 50
        minLength: 2
        type: string
      status:
        description: 1:启用 2:禁用
        enum:
        - 1
        - 2
        example: 1
        type: integer
      tenant_id:
        description: 租户ID
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - name
    type: object
  model.User:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        maxLength: 255
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      email:
        example: admin@example.com
        maxLength: 100
        type: string
      id:
        example: 1
        type: integer
      nickname:
        example: 管理员
        maxLength: 50
        type: string
      password:
        example: "123456"
        maxLength: 100
        minLength: 6
        type: string
      phone:
        example: "13800138000"
        maxLength: 20
        type: string
      status:
        description: 1:启用 2:禁用
        enum:
        - 1
        - 2
        example: 1
        type: integer
      tenant_id:
        description: 租户ID
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      username:
        example: admin
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  service.PermissionRequest:
    properties:
      api_ids:
        items:
          type: integer
        type: array
      menu_ids:
        items:
          type: integer
        type: array
      role_id:
        type: integer
      tenant_id:
        type: integer
    required:
    - role_id
    type: object
  service.UserRoleRequest:
    properties:
      role_ids:
        items:
          type: integer
        type: array
      tenant_id:
        type: integer
      user_id:
        type: integer
    required:
    - user_id
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 基于Gin + React的后台管理系统API文档
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go-React-Admin API
  version: "1.0"
paths:
  /api/apis:
    get:
      consumes:
      - application/json
      description: 获取所有API的列表
      produces:
      - application/json
      responses:
        "200":
          description: '{"apis":[]model.Api}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取API列表失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取API列表
      tags:
      - API管理
    post:
      consumes:
      - application/json
      description: 创建新API接口
      parameters:
      - description: API创建信息
        in: body
        name: api
        required: true
        schema:
          $ref: '#/definitions/model.Api'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"创建API成功","api":model.Api}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"创建API失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 创建API
      tags:
      - API管理
  /api/apis/{id}:
    delete:
      consumes:
      - application/json
      description: 根据API ID删除API
      parameters:
      - description: API ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"删除API成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"无效的API ID"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"删除API失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 删除API
      tags:
      - API管理
    put:
      consumes:
      - application/json
      description: 根据API ID更新API信息
      parameters:
      - description: API ID
        in: path
        name: id
        required: true
        type: integer
      - description: API更新信息
        in: body
        name: api
        required: true
        schema:
          $ref: '#/definitions/model.Api'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"更新API成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"更新API失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 更新API
      tags:
      - API管理
  /api/login:
    post:
      consumes:
      - application/json
      description: 用户登录接口，验证用户名密码并返回JWT Token
      parameters:
      - description: 用户登录信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"登录成功","token":"string","userId":"uint"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"string"}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"error":"用户名或密码错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"生成Token失败"}'
          schema:
            additionalProperties: true
            type: object
      summary: 用户登录
      tags:
      - 用户管理
  /api/logout:
    post:
      consumes:
      - application/json
      description: 用户登出接口
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"登出成功"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 用户登出
      tags:
      - 用户管理
  /api/logs:
    get:
      consumes:
      - application/json
      description: 获取系统日志列表，支持分页、搜索和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      - description: 用户名搜索
        in: query
        name: username
        type: string
      - description: HTTP方法
        in: query
        name: method
        type: string
      - description: 状态码
        in: query
        name: statusCode
        type: integer
      - description: 开始日期
        format: date
        in: query
        name: startDate
        type: string
      - description: 结束日期
        format: date
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"logs":[]model.Log,"total":int,"page":int,"pageSize":int}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取日志列表失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取日志列表
      tags:
      - 日志管理
  /api/menus:
    get:
      consumes:
      - application/json
      description: 获取所有菜单的列表
      produces:
      - application/json
      responses:
        "200":
          description: '{"menus":[]model.Menu}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取菜单列表失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取菜单列表
      tags:
      - 菜单管理
    post:
      consumes:
      - application/json
      description: 创建新菜单
      parameters:
      - description: 菜单创建信息
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"菜单创建成功","menu":model.Menu}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"创建菜单失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 创建菜单
      tags:
      - 菜单管理
  /api/menus/{id}:
    delete:
      consumes:
      - application/json
      description: 根据菜单ID删除菜单
      parameters:
      - description: 菜单ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"菜单删除成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"无效的菜单ID"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"删除菜单失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 删除菜单
      tags:
      - 菜单管理
    put:
      consumes:
      - application/json
      description: 根据菜单ID更新菜单信息
      parameters:
      - description: 菜单ID
        in: path
        name: id
        required: true
        type: integer
      - description: 菜单更新信息
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"菜单更新成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"更新菜单失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 更新菜单
      tags:
      - 菜单管理
  /api/menus/user:
    get:
      consumes:
      - application/json
      description: 获取当前用户的菜单列表
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":[]model.Menu,"message":"获取用户菜单成功"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取用户菜单失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取用户菜单
      tags:
      - 菜单管理
  /api/permissions/check:
    get:
      consumes:
      - application/json
      description: 检查用户是否有特定权限
      parameters:
      - description: 资源
        in: query
        name: resource
        required: true
        type: string
      - description: 操作
        in: query
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 检查权限
      tags:
      - 权限管理
  /api/permissions/role:
    post:
      consumes:
      - application/json
      description: 为角色分配菜单和API权限
      parameters:
      - description: 权限分配请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 分配角色权限
      tags:
      - 权限管理
  /api/permissions/role/{id}:
    get:
      consumes:
      - application/json
      description: 获取指定角色的权限信息
      parameters:
      - description: 角色ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 获取角色权限
      tags:
      - 权限管理
  /api/permissions/user:
    post:
      consumes:
      - application/json
      description: 为用户分配角色
      parameters:
      - description: 用户角色分配请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 分配用户角色
      tags:
      - 权限管理
  /api/permissions/user/{id}/permissions:
    get:
      consumes:
      - application/json
      description: 获取指定用户的所有权限（通过角色）
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 获取用户权限
      tags:
      - 权限管理
  /api/permissions/user/{id}/roles:
    get:
      consumes:
      - application/json
      description: 获取指定用户的角色信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 请求参数错误
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 服务器错误
          schema:
            additionalProperties: true
            type: object
      summary: 获取用户角色
      tags:
      - 权限管理
  /api/register:
    post:
      consumes:
      - application/json
      description: 用户注册接口，创建新用户
      parameters:
      - description: 用户注册信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"注册成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"string"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"注册失败"}'
          schema:
            additionalProperties: true
            type: object
      summary: 用户注册
      tags:
      - 用户管理
  /api/roles:
    get:
      consumes:
      - application/json
      description: 获取所有角色的列表
      produces:
      - application/json
      responses:
        "200":
          description: '{"roles":[]model.Role}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取角色列表失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取角色列表
      tags:
      - 角色管理
    post:
      consumes:
      - application/json
      description: 创建新角色
      parameters:
      - description: 角色创建信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"角色创建成功","role":model.Role}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"创建角色失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - 角色管理
  /api/roles/{id}:
    delete:
      consumes:
      - application/json
      description: 根据角色ID删除角色
      parameters:
      - description: 角色ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"角色删除成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"无效的角色ID"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"删除角色失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - 角色管理
    put:
      consumes:
      - application/json
      description: 根据角色ID更新角色信息
      parameters:
      - description: 角色ID
        in: path
        name: id
        required: true
        type: integer
      - description: 角色更新信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"角色更新成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"更新角色失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 更新角色
      tags:
      - 角色管理
  /api/user/info:
    get:
      consumes:
      - application/json
      description: 根据JWT Token获取当前登录用户的信息
      produces:
      - application/json
      responses:
        "200":
          description: '{"user":model.User}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"error":"无法获取用户信息"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"error":"用户不存在"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取当前用户信息
      tags:
      - 用户管理
  /api/users:
    get:
      consumes:
      - application/json
      description: 获取所有用户的列表
      produces:
      - application/json
      responses:
        "200":
          description: '{"users":[]model.User}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"获取用户列表失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - 用户管理
    post:
      consumes:
      - application/json
      description: 创建新用户
      parameters:
      - description: 用户创建信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"用户创建成功","user":model.User}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"创建用户失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 创建用户
      tags:
      - 用户管理
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: 根据用户ID删除用户
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"用户删除成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"无效的用户ID"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"删除用户失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - 用户管理
    put:
      consumes:
      - application/json
      description: 根据用户ID更新用户信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 用户更新信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"用户更新成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"请求参数错误"}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error":"更新用户失败"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: 更新用户
      tags:
      - 用户管理
schemes:
- http
- https
swagger: "2.0"
